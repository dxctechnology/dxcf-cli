#!/bin/bash
#
# This is a script to tag Default Resources
#
#  1. Initalize Environment

bindir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

step=0
speed_max=400
run_default=10
pause_default=2
next_default=5

interactive=0
speed=100
verbose=0
monitor=0
owner=${OWNER_EMAIL:-$USER@dxc.com}
company=${COMPANY_NAME:-DXC}
system=${SYSTEM_NAME:-Prototype}
environment=Default
region=${AWS_DEFAULT_REGION:-us-west-2}
account=${AWS_ACCOUNT_ALIAS:-dxcapp}
user=${AWS_USER_NAME:-administrator}


#  2. Define functions

usage () {
    echo "Usage: ${BASH_SOURCE##*/} [[-i] | [-s | -f]]"
    echo "                  [-O owner] [-C company] [-S system]"
    echo "                  [-E environment]"
    echo "                  [-r region] [-a account] [-u user]"
    echo "  -i              interactive"
    echo "  -s              slower: increase pauses by 25%"
    echo "  -f              faster: reduce pauses by 25%"
    echo "  -O owner        Owner Email (default: $owner)"
    echo "  -C company      Company Name (default: $company)"
    echo "  -S system       System Name (default: $system)"
    echo "  -E environment  Environment Name (default: $environment)"
    echo "  -r region       Region (default: $region)"
    echo "  -a account      Account (default: $account)"
    echo "  -u user         User (default: $user)"
}

run() {
    if [ -z $1 ] || (($1 % 25 != 0)); then
        ((seconds=run_default * speed / 100))
    else
        ((seconds=run_default * $1 * speed / 10000))
    fi
    if [ $interactive = 1 ]; then
        echo
        echo -n "Run? [Y/n/q]"
        read choice
        case "$choice" in
            "" | "y" | "Y" | "yes" | "Yes") choice=y ;;
            "n" | "N" | "no" | "No") choice=n ;;
             *) echo "cancelled"
                exit 2;;
        esac
    else
        echo
        echo -n -e "Waiting $(printf '%2d' $seconds) seconds..."
        while ((seconds > 0)); do
            if ((seconds < 10 || seconds % 10 == 0)); then
                echo -n -e "\rWaiting $(printf '%2d' $seconds) seconds..."
            fi
            sleep 1
            ((seconds--))
        done
        echo " Done"
        choice=y
    fi
}

pause() {
    if [ -z $1 ] || (($1 % 25 != 0)); then
        ((seconds=pause_default * speed / 100))
    else
        ((seconds=pause_default * $1 * speed / 10000))
    fi
    if [ $interactive = 1 ]; then
        echo "#"
        read pause
        echo -en "\033[1A\033[2K"    # undo newline from read
    else
        echo "#"
        sleep $seconds
    fi
}

next() {
    if [ -z $1 ] || (($1 % 25 != 0)); then
        ((seconds=next_default * speed / 100))
    else
        ((seconds=next_default * $1 * speed / 10000))
    fi
    if [ $interactive = 1 ]; then
        echo
        echo -n "Next? [Y/q]"
        read choice
        case "$choice" in
            "" | "y" | "Y" | "yes" | "Yes") choice=y ;;
             *) echo "cancelled"
                exit 2;;
        esac
    else
        echo
        echo -n -e "Waiting $(printf '%2d' $seconds) seconds..."
        while ((seconds > 0)); do
            if ((seconds < 10 || seconds % 10 == 0)); then
                echo -n -e "\rWaiting $(printf '%2d' $seconds) seconds..."
            fi
            sleep 1
            ((seconds--))
        done
        echo " Done"
        choice=y
    fi
}


#  3. Parse command line options

while getopts isfO:C:S:E:r:a:u:? arg; do
    case $arg in
    i)  interactive=1;;
    s)  ((speed < speed_max)) && ((speed=speed+25));;
    f)  ((speed > 0)) && ((speed=speed-25));;
    O)  owner="$OPTARG";;
    C)  company="$OPTARG";;
    S)  system="$OPTARG";;
    E)  environment="$OPTARG";;
    r)  region="$OPTARG";;
    a)  account="$OPTARG";;
    u)  user="$OPTARG";;
    ?)  usage
        exit 1;;
    esac
done

shift $(($OPTIND - 1))


#  4. Validate environment

if [ -z "$owner" ]; then
    echo "-O owner missing!"
    echo "Could not automatically determine owner, and it was not specified as a parameter"
    exit 10
fi

if [ -z "$company" ]; then
    echo "-C company missing!"
    echo "Could not automatically determine company, and it was not specified as a parameter"
    exit 12
fi

if [ -z "$system" ]; then
    echo "-S system missing!"
    echo "Could not automatically determine system, and it was not specified as a parameter"
    exit 14
fi

if [ -z "$environment" ]; then
    echo "-E environment missing!"
    echo "Could not automatically determine environment, and it was not specified as a parameter"
    exit 20
else
    case $environment in
      Default)
        ;;
      Production)
        ;;
      Staging)
        ;;
      UAT)
        ;;
      Testing)
        ;;
      Development)
        ;;
      Log)
        ;;
      Core)
        ;;
      Build)
        ;;
      Identity)
        ;;
      *)
        echo "-E $environment invalid! Must be Default, Production, Staging, UAT, Testing, Development, Log, Core, Build or Identity"
        exit 21;;
    esac
fi

if [ -z "$region" ]; then
    echo "-r region missing!"
    echo "Could not automatically determine region, and it was not specified as a parameter"
    exit 50
else
    case $region in
      us-east-1)
        s3_domain=s3.amazonaws.com;;
      us-east-2|us-west-1|us-west-2|ca-central-1|eu-west-1|eu-central-1|eu-west-2|eu-west-3|eu-north-1|ap-east-1|ap-southeast-1|ap-southeast-2|ap-northeast-2|ap-northeast-1|ap-south-1|me-south-1|sa-east-1)
        s3_domain=s3-$region.amazonaws.com;;
      *)
        echo "-r $region invalid: Please specify a valid region"
        exit 51;;
    esac
fi

if [ -z "$account" ]; then
    echo "-a account missing!"
    echo "Could not automatically determine account, and it was not specified as a parameter"
    exit 52
fi

if [ -z "$user" ]; then
    echo "-u user missing!"
    echo "Could not automatically determine user, and it was not specified as a parameter"
    exit 54
fi

profile=$account-$user

if ! grep -s -q "\[profile $profile]" ~/.aws/config; then
    echo "Could not find ($account) Account ($user) User AWSCLI profile!"
    echo "Expected to find: [profile $profile] in ~/.aws/config"
    exit 58
fi

# Prevent certain environment variables from breaking commands
unset AWS_DEFAULT_PROFILE
unset AWS_CREDENTIAL_FILE
unset EC2_PRIVATE_KEY
unset EC2_CERT


#  5. Run

start=$(date +%s)

((++step))
vpc=$(aws ec2 describe-vpcs --filter Name=is-default,Values=true \
                            --query 'Vpcs[].VpcId' \
                            --profile=$profile --region $region --output text)

read -r -d '' statement << EOS
aws ec2 create-tags --resources $vpc \\
                    --tags Key=Name,Value=$environment-VPC \\
                           Key=Owner,Value="$owner" \\
                           Key=Company,Value="$company" \\
                           Key=System,Value="$system" \\
                           Key=Environment,Value=$environment \\
                    --profile=$profile --region $region
EOS
run_statement=$(echo "$statement" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement="${statement//\\$'\n'}"

if [ $environment=Default ]; then
    clear
    echo
    echo "============================================================"
    echo
    echo "$(printf '%2d' $step). Tag $environment VPC"
    echo
    echo "============================================================"
    echo
    echo "Commands:"
    echo
    echo "$statement"

    run 50

    if [ $choice = y ]; then
        echo
        echo "$run_statement"
        eval "$eval_statement"

        next 50
    fi
fi


((++step))
subneta=$(aws ec2 describe-subnets --filter Name=vpc-id,Values=$vpc \
                                            Name=availability-zone,Values=${region}a \
                                            Name=default-for-az,Values=true \
                                   --query 'Subnets[].SubnetId' \
                                   --profile=$profile --region $region --output text)

subnetb=$(aws ec2 describe-subnets --filter Name=vpc-id,Values=$vpc \
                                            Name=availability-zone,Values=${region}b \
                                            Name=default-for-az,Values=true \
                                   --query 'Subnets[].SubnetId' \
                                   --profile=$profile --region $region --output text)

subnetc=$(aws ec2 describe-subnets --filter Name=vpc-id,Values=$vpc \
                                            Name=availability-zone,Values=${region}c \
                                            Name=default-for-az,Values=true \
                                   --query 'Subnets[].SubnetId' \
                                   --profile=$profile --region $region --output text)

subnetd=$(aws ec2 describe-subnets --filter Name=vpc-id,Values=$vpc \
                                            Name=availability-zone,Values=${region}d \
                                            Name=default-for-az,Values=true \
                                   --query 'Subnets[].SubnetId' \
                                   --profile=$profile --region $region --output text)

subnete=$(aws ec2 describe-subnets --filter Name=vpc-id,Values=$vpc \
                                            Name=availability-zone,Values=${region}e \
                                            Name=default-for-az,Values=true \
                                   --query 'Subnets[].SubnetId' \
                                   --profile=$profile --region $region --output text)

subnetf=$(aws ec2 describe-subnets --filter Name=vpc-id,Values=$vpc \
                                            Name=availability-zone,Values=${region}f \
                                            Name=default-for-az,Values=true \
                                   --query 'Subnets[].SubnetId' \
                                   --profile=$profile --region $region --output text)

read -r -d '' statement1 << EOS
aws ec2 create-tags --resources $subneta \\
                    --tags Key=Name,Value=$environment-DefaultSubnetA \\
                           Key=Owner,Value="$owner" \\
                           Key=Company,Value="$company" \\
                           Key=System,Value="$system" \\
                           Key=Environment,Value=$environment \\
                    --profile=$profile --region $region
EOS
run_statement1=$(echo "$statement1" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement1="${statement1//\\$'\n'}"

read -r -d '' statement2 << EOS
aws ec2 create-tags --resources $subnetb \\
                    --tags Key=Name,Value=$environment-DefaultSubnetB \\
                           Key=Owner,Value="$owner" \\
                           Key=Company,Value="$company" \\
                           Key=System,Value="$system" \\
                           Key=Environment,Value=$environment \\
                    --profile=$profile --region $region
EOS
run_statement2=$(echo "$statement2" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement2="${statement2//\\$'\n'}"

read -r -d '' statement3 << EOS
aws ec2 create-tags --resources $subnetc \\
                    --tags Key=Name,Value=$environment-DefaultSubnetC \\
                           Key=Owner,Value="$owner" \\
                           Key=Company,Value="$company" \\
                           Key=System,Value="$system" \\
                           Key=Environment,Value=$environment \\
                    --profile=$profile --region $region
EOS
run_statement3=$(echo "$statement3" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement3="${statement3//\\$'\n'}"

read -r -d '' statement4 << EOS
aws ec2 create-tags --resources $subnetd \\
                    --tags Key=Name,Value=$environment-DefaultSubnetD \\
                           Key=Owner,Value="$owner" \\
                           Key=Company,Value="$company" \\
                           Key=System,Value="$system" \\
                           Key=Environment,Value=$environment \\
                    --profile=$profile --region $region
EOS
run_statement4=$(echo "$statement4" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement4="${statement4//\\$'\n'}"

read -r -d '' statement5 << EOS
aws ec2 create-tags --resources $subnete \\
                    --tags Key=Name,Value=$environment-DefaultSubnetE \\
                           Key=Owner,Value="$owner" \\
                           Key=Company,Value="$company" \\
                           Key=System,Value="$system" \\
                           Key=Environment,Value=$environment \\
                    --profile=$profile --region $region
EOS
run_statement5=$(echo "$statement5" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement5="${statement5//\\$'\n'}"

read -r -d '' statement6 << EOS
aws ec2 create-tags --resources $subnetf \\
                    --tags Key=Name,Value=$environment-DefaultSubnetF \\
                           Key=Owner,Value="$owner" \\
                           Key=Company,Value="$company" \\
                           Key=System,Value="$system" \\
                           Key=Environment,Value=$environment \\
                    --profile=$profile --region $region
EOS
run_statement6=$(echo "$statement6" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement6="${statement6//\\$'\n'}"

clear
echo
echo "============================================================"
echo
echo "$(printf '%2d' $step). Tag $environment VPC Default Subnets"
echo
echo "============================================================"
echo
echo "Commands:"
echo
if [ ! -z $subneta ]; then
    echo
    echo "$statement1"
fi
if [ ! -z $subnetb ]; then
    echo
    echo "$statement2"
fi
if [ ! -z $subnetc ]; then
    echo
    echo "$statement3"
fi
if [ ! -z $subnetd ]; then
    echo
    echo "$statement4"
fi
if [ ! -z $subnete ]; then
    echo
    echo "$statement5"
fi
if [ ! -z $subnetf ]; then
    echo
    echo "$statement6"
fi

run 50

if [ $choice = y ]; then
    if [ ! -z $subneta ]; then
        echo
        echo "$run_statement1"
        eval "$eval_statement1"
    fi
    if [ ! -z $subnetb ]; then
        echo
        echo "$run_statement2"
        eval "$eval_statement2"
    fi
    if [ ! -z $subnetc ]; then
        echo
        echo "$run_statement3"
        eval "$eval_statement3"
    fi
    if [ ! -z $subnetd ]; then
        echo
        echo "$run_statement4"
        eval "$eval_statement4"
    fi
    if [ ! -z $subnete ]; then
        echo
        echo "$run_statement5"
        eval "$eval_statement5"
    fi
    if [ ! -z $subnetf ]; then
        echo
        echo "$run_statement6"
        eval "$eval_statement6"
    fi

    next 50
fi


((++step))
rtb=$(aws ec2 describe-route-tables --filter Name=vpc-id,Values=$vpc \
                                             Name=association.main,Values=true \
                                    --query 'RouteTables[].RouteTableId' \
                                    --profile=$profile --region $region --output text)

read -r -d '' statement << EOS
aws ec2 create-tags --resources $rtb \\
                    --tags Key=Name,Value=$environment-MainRouteTable \\
                           Key=Owner,Value="$owner" \\
                           Key=Company,Value="$company" \\
                           Key=System,Value="$system" \\
                           Key=Environment,Value=$environment \\
                    --profile=$profile --region $region
EOS
run_statement=$(echo "$statement" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement="${statement//\\$'\n'}"

clear
echo
echo "============================================================"
echo
echo "$(printf '%2d' $step). Tag $environment VPC Main Route Table"
echo
echo "============================================================"
echo
echo "Commands:"
echo
echo "$statement"

run 50

if [ $choice = y ]; then
    echo
    echo "$run_statement"
    eval "$eval_statement"

    next 50
fi


((++step))
igw=$(aws ec2 describe-internet-gateways --filter Name=attachment.vpc-id,Values=$vpc \
                                         --query 'InternetGateways[].InternetGatewayId' \
                                         --profile=$profile --region $region --output text)

read -r -d '' statement << EOS
aws ec2 create-tags --resources $igw \\
                    --tags Key=Name,Value=$environment-InternetGateway \\
                           Key=Owner,Value="$owner" \\
                           Key=Company,Value="$company" \\
                           Key=System,Value="$system" \\
                           Key=Environment,Value=$environment \\
                    --profile=$profile --region $region
EOS
run_statement=$(echo "$statement" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement="${statement//\\$'\n'}"

if [ $environment=Default ]; then
    clear
    echo
    echo "============================================================"
    echo
    echo "$(printf '%2d' $step). Tag $environment VPC Internet Gateway"
    echo
    echo "============================================================"
    echo
    echo "Commands:"
    echo
    echo "$statement"

    run 50

    if [ $choice = y ]; then
        echo
        echo "$run_statement"
        eval "$eval_statement"

        next 50
    fi
fi

((++step))
dopt=$(aws ec2 describe-vpcs --filter Name=is-default,Values=true \
                             --query 'Vpcs[].DhcpOptionsId' \
                             --profile=$profile --region $region --output text)

read -r -d '' statement << EOS
aws ec2 create-tags --resources $dopt \\
                    --tags Key=Name,Value=$environment-DHCPOptions \\
                           Key=Owner,Value="$owner" \\
                           Key=Company,Value="$company" \\
                           Key=System,Value="$system" \\
                           Key=Environment,Value=$environment \\
                    --profile=$profile --region $region
EOS
run_statement=$(echo "$statement" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement="${statement//\\$'\n'}"

if [ $environment=Default ]; then
    clear
    echo
    echo "============================================================"
    echo
    echo "$(printf '%2d' $step). Tag $environment VPC Default DHCP Options Set"
    echo
    echo "============================================================"
    echo
    echo "Commands:"
    echo
    echo "$statement"

    run 50

    if [ $choice = y ]; then
        echo
        echo "$run_statement"
        eval "$eval_statement"

        next 50
    fi
fi


((++step))
acl=$(aws ec2 describe-network-acls --filter Name=vpc-id,Values=$vpc \
                                             Name=default,Values=true \
                                    --query 'NetworkAcls[].NetworkAclId' \
                                    --profile=$profile --region $region --output text)

read -r -d '' statement << EOS
aws ec2 create-tags --resources $acl \\
                    --tags Key=Name,Value=$environment-DefaultNetworkAcl \\
                           Key=Owner,Value="$owner" \\
                           Key=Company,Value="$company" \\
                           Key=System,Value="$system" \\
                           Key=Environment,Value=$environment \\
                    --profile=$profile --region $region
EOS
run_statement=$(echo "$statement" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement="${statement//\\$'\n'}"

clear
echo
echo "============================================================"
echo
echo "$(printf '%2d' $step). Tag $environment VPC Default Network ACL"
echo
echo "============================================================"
echo
echo "Commands:"
echo
echo "$statement"

run 50

if [ $choice = y ]; then
    echo
    echo "$run_statement"
    eval "$eval_statement"

    next 50
fi


((++step))
sg=$(aws ec2 describe-security-groups --filter Name=vpc-id,Values=$vpc \
                                               Name=group-name,Values=default \
                                      --query 'SecurityGroups[].GroupId' \
                                      --profile=$profile --region $region --output text)

read -r -d '' statement << EOS
aws ec2 create-tags --resources $sg \\
                    --tags Key=Name,Value=$environment-DefaultSecurityGroup \\
                           Key=Owner,Value="$owner" \\
                           Key=Company,Value="$company" \\
                           Key=System,Value="$system" \\
                           Key=Environment,Value=$environment \\
                    --profile=$profile --region $region
EOS
run_statement=$(echo "$statement" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement="${statement//\\$'\n'}"

clear
echo
echo "============================================================"
echo
echo "$(printf '%2d' $step). Tag $environment VPC Default Security Group"
echo
echo "============================================================"
echo
echo "Commands:"
echo
echo "$statement"

run 50

if [ $choice = y ]; then
    echo
    echo "$run_statement"
    eval "$eval_statement"

    next 50
fi

end=$(date +%s)

echo
case $(uname) in
  Darwin)
    echo "(time: $(date -u -r $((end-start)) +"%T"))";;
  *)
    echo "(time: $(date -u -d @$((end-start)) +"%T"))";;
esac
