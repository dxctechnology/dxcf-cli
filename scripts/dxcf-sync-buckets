#!/bin/bash
#
# This script syncs S3 buckets from one region to another
#


#  1. Initalize Environment

bindir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

step=0
speed_max=400
run_default=10
pause_default=2
next_default=5
create_default=15
create_attempts=40

interactive=0
speed=100
quiet="--quiet "
dryrun=""
buckets=default
source_region=us-east-1
destination_region=us-east-2
region=us-east-1
account=${AWS_ACCOUNT_ALIAS:-dxcapp}
user=${AWS_USER_NAME:-administrator}


#  2. Define functions

usage () {
    echo "Usage: ${BASH_SOURCE##*/} [[-i] | [-s | -f]] [-v] [-d]"
    echo "                  [-B bucket]"
    echo "                  [-S source] [-D destination]"
    echo "                  [-a account] [-u user]"
    echo "  -i              interactive"
    echo "  -s              slower: increase pauses by 25%"
    echo "  -f              faster: reduce pauses by 25%"
    echo "  -v              verbose"
    echo "  -d              dryrun"
    echo "  -B bucket       Bucket [or 'default' or 'all'] (default: $buckets)"
    echo "  -S source       Source Region (default: $source_region)"
    echo "  -D destination  Destination Region (default: $destination_region)"
    echo "  -a account      Account (default: $account)"
    echo "  -u user         User (default: $user)"
}

run() {
    if [ -z $1 ] || (($1 % 25 != 0)); then
        ((seconds=run_default * speed / 100))
    else
        ((seconds=run_default * $1 * speed / 10000))
    fi
    if [ $interactive = 1 ]; then
        echo
        echo -n "Run? [Y/n/q]"
        read choice
        case "$choice" in
            "" | "y" | "Y" | "yes" | "Yes") choice=y ;;
            "n" | "N" | "no" | "No") choice=n ;;
             *) echo "cancelled"
                exit 2;;
        esac
    else
        echo
        echo -n -e "Waiting $(printf '%2d' $seconds) seconds..."
        while ((seconds > 0)); do
            if ((seconds < 10 || seconds % 10 == 0)); then
                echo -n -e "\rWaiting $(printf '%2d' $seconds) seconds..."
            fi
            sleep 1
            ((seconds--))
        done
        echo " Done"
        choice=y
    fi
}

pause() {
    if [ -z $1 ] || (($1 % 25 != 0)); then
        ((seconds=pause_default * speed / 100))
    else
        ((seconds=pause_default * $1 * speed / 10000))
    fi
    if [ $interactive = 1 ]; then
        echo "#"
        read pause
        echo -en "\033[1A\033[2K"    # undo newline from read
    else
        echo "#"
        sleep $seconds
    fi
}

next() {
    if [ -z $1 ] || (($1 % 25 != 0)); then
        ((seconds=next_default * speed / 100))
    else
        ((seconds=next_default * $1 * speed / 10000))
    fi
    if [ $interactive = 1 ]; then
        echo
        echo -n "Next? [Y/q]"
        read choice
        case "$choice" in
            "" | "y" | "Y" | "yes" | "Yes") choice=y ;;
             *) echo "cancelled"
                exit 2;;
        esac
    else
        echo
        echo -n -e "Waiting $(printf '%2d' $seconds) seconds..."
        while ((seconds > 0)); do
            if ((seconds < 10 || seconds % 10 == 0)); then
                echo -n -e "\rWaiting $(printf '%2d' $seconds) seconds..."
            fi
            sleep 1
            ((seconds--))
        done
        echo " Done"
        choice=y
    fi
}


#  3. Parse command line options

while getopts isfvdB:S:D:a:u:? arg; do
    case $arg in
    i)  interactive=1;;
    s)  ((speed < speed_max)) && ((speed=speed+25));;
    f)  ((speed > 0)) && ((speed=speed-25));;
    v)  quiet="";;
    d)  dryrun="--dryrun ";;
    B)  buckets="$OPTARG";;
    S)  source_region="$OPTARG";;
    D)  destination_region="$OPTARG";;
    a)  account="$OPTARG";;
    u)  user="$OPTARG";;
    ?)  usage
        exit 1;;
    esac
done

shift $(($OPTIND - 1))


#  4. Validate environment

if [ -z $buckets ]; then
    echo "-B bucket missing!"
    echo "Could not automatically determine bucket, and it was not specified as a parameter"
    exit 10
else
    case $buckets in
      default)
        buckets="applications examples products"
        ;;
      all)
        buckets="applications demos examples products scripts users"
        ;;
      applications)
        ;;
      demos)
        ;;
      examples)
        ;;
      products)
        ;;
      scripts)
        ;;
      users)
        ;;
      *)
        echo "-B $buckets invalid! Must be default, all, applications, demos, examples, products, scripts or users"
        exit 11;;
    esac
fi

if [ -z $source_region ]; then
    echo "-S source missing!"
    echo "Could not automatically determine source region, and it was not specified as a parameter"
    exit 20
else
    case $source_region in
      us-east-1|us-east-2|us-west-1|us-west-2|ca-central-1|eu-west-1|eu-central-1|eu-west-2|eu-west-3|eu-north-1|ap-east-1|ap-southeast-1|ap-southeast-2|ap-northeast-2|ap-northeast-1|ap-south-1|me-south-1|sa-east-1)
        ;;
      *)
        echo "-S $source_region invalid: Please specify a valid region"
        exit 21;;
    esac
fi

if [ -z $destination_region ]; then
    echo "-D destination missing!"
    echo "Could not automatically determine destination region, and it was not specified as a parameter"
    exit 22
else
    case $destination_region in
      us-east-1|us-east-2|us-west-1|us-west-2|ca-central-1|eu-west-1|eu-central-1|eu-west-2|eu-west-3|eu-north-1|ap-east-1|ap-southeast-1|ap-southeast-2|ap-northeast-2|ap-northeast-1|ap-south-1|me-south-1|sa-east-1)
        ;;
      *)
        echo "-D $destination_region invalid: Please specify a valid region"
        exit 23;;
    esac
fi

if [ -z $account ]; then
    echo "-a account missing!"
    echo "Could not automatically determine account, and it was not specified as a parameter"
    exit 52
fi

if [ -z $user ]; then
    echo "-u user missing!"
    echo "Could not automatically determine user, and it was not specified as a parameter"
    exit 54
fi

profile=$account-$user

if ! grep -s -q "\[profile $profile]" ~/.aws/config; then
    echo "Could not find ($account) Account ($user) User AWSCLI profile!"
    echo "Expected to find: [profile $profile] in ~/.aws/config"
    exit 58
fi

# Prevent certain environment variables from breaking commands
unset AWS_DEFAULT_PROFILE
unset AWS_CREDENTIAL_FILE
unset EC2_PRIVATE_KEY
unset EC2_CERT


#  5. Run

start=$(date +%s)

((++step))
read -r -d '' statement << EOS
aws s3 sync s3://applications-$source_region-$account/ \\
            s3://applications-$destination_region-$account/ \\
        $quiet$dryrun--profile $profile --region $region
EOS
run_statement=$(echo "$statement" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement="${statement//\\$'\n'}"

if [[ $buckets =~ applications ]]; then
    clear
    echo
    echo "============================================================"
    echo
    echo "$(printf '%2d' $step). Sync Applications Bucket"
    echo
    echo "============================================================"
    echo
    echo "Commands:"
    echo
    echo "$statement"

    run 50

    if [ $choice = y ]; then
        echo
        echo "$run_statement"
        eval "$eval_statement"

        next
    fi
fi


((++step))
read -r -d '' statement << EOS
aws s3 sync s3://demos-$source_region-$account/ \\
            s3://demos-$destination_region-$account/ \\
        $quiet$dryrun--profile $profile --region $region
EOS
run_statement=$(echo "$statement" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement="${statement//\\$'\n'}"

if [[ $buckets =~ demos ]]; then
    clear
    echo
    echo "============================================================"
    echo
    echo "$(printf '%2d' $step). Sync Demos Bucket"
    echo
    echo "============================================================"
    echo
    echo "Commands:"
    echo
    echo "$statement"

    run 50

    if [ $choice = y ]; then
        echo
        echo "$run_statement"
        eval "$eval_statement"

        next
    fi
fi


((++step))
read -r -d '' statement << EOS
aws s3 sync s3://examples-$source_region-$account/ \\
            s3://examples-$destination_region-$account/ \\
        $quiet$dryrun--profile $profile --region $region
EOS
run_statement=$(echo "$statement" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement="${statement//\\$'\n'}"

if [[ $buckets =~ examples ]]; then
    clear
    echo
    echo "============================================================"
    echo
    echo "$(printf '%2d' $step). Sync Examples Bucket"
    echo
    echo "============================================================"
    echo
    echo "Commands:"
    echo
    echo "$statement"

    run 50

    if [ $choice = y ]; then
        echo
        echo "$run_statement"
        eval "$eval_statement"

        next
    fi
fi


((++step))
read -r -d '' statement << EOS
aws s3 sync s3://products-$source_region-$account/ \\
            s3://products-$destination_region-$account/ \\
        $quiet$dryrun--profile $profile --region $region
EOS
run_statement=$(echo "$statement" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement="${statement//\\$'\n'}"

if [[ $buckets =~ products ]]; then
    clear
    echo
    echo "============================================================"
    echo
    echo "$(printf '%2d' $step). Sync Products Bucket"
    echo
    echo "============================================================"
    echo
    echo "Commands:"
    echo
    echo "$statement"

    run 50

    if [ $choice = y ]; then
        echo
        echo "$run_statement"
        eval "$eval_statement"

        next
    fi
fi


((++step))
read -r -d '' statement << EOS
aws s3 sync s3://scripts-$source_region-$account/ \\
            s3://scripts-$destination_region-$account/ \\
        $quiet$dryrun--profile $profile --region $region
EOS
run_statement=$(echo "$statement" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement="${statement//\\$'\n'}"

if [[ $buckets =~ scripts ]]; then
    clear
    echo
    echo "============================================================"
    echo
    echo "$(printf '%2d' $step). Sync Scripts Bucket"
    echo
    echo "============================================================"
    echo
    echo "Commands:"
    echo
    echo "$statement"

    run 50

    if [ $choice = y ]; then
        echo
        echo "$run_statement"
        eval "$eval_statement"

        next
    fi
fi


((++step))
read -r -d '' statement << EOS
aws s3 sync s3://users-$source_region-$account/ \\
            s3://users-$destination_region-$account/ \\
        $quiet$dryrun--profile $profile --region $region
EOS
run_statement=$(echo "$statement" | sed -e '1s/^/# /;2,$ s/^/> /')
eval_statement="${statement//\\$'\n'}"

if [[ $buckets =~ users ]]; then
    clear
    echo
    echo "============================================================"
    echo
    echo "$(printf '%2d' $step). Sync Users Bucket"
    echo
    echo "============================================================"
    echo
    echo "Commands:"
    echo
    echo "$statement"

    run 50

    if [ $choice = y ]; then
        echo
        echo "$run_statement"
        eval "$eval_statement"

        next
    fi
fi

end=$(date +%s)

echo
case $(uname) in
  Darwin)
    echo "(time: $(date -u -r $((end-start)) +"%T"))";;
  *)
    echo "(time: $(date -u -d @$((end-start)) +"%T"))";;
esac
